@startuml
skinparam style strictuml
skinparam SequenceBoxBorderColor white
skinparam headerFontColor black
skinparam headerFontSize 12

Title Call Details

left header
ICAPPR phone calls are implemented with an IVR service called Verboice.

Patients enter PINs and respond to questions by pressing buttons on their
phones.  Verboice sends these data to the ICAPPR Motech server via
HTTP requests, configured as Verboice "External Services", which are
handled by custom end points in within the ICAPPR module.
(http://verboice.instedd.org/projects/228/external_services).

Verboice also sends generic call status data to the ICAPPR Motech server
via HTTP requests, configured as Verboice status "Callbacks", which are
handled by the Motech platform's IVR module.
endheader


box "ICAPPR" #ghostwhite
participant CallInitiationService
participant PinAuthenticationController
participant VerboiceInteractionController
end box

box "Motech" #ivory
participant "IVR Service" as IVR
end box

participant "Verboice" as V
participant "Patient" as P

box "Motech" #ivory
participant "Platform Events" as Events
end box

note left of CallInitiationService : from call\ninitiation
CallInitiationService -> IVR : initiateCall()
activate IVR

IVR -> V : HTTP call
activate V
IVR <<-- V : call Id
deactivate IVR

V ->> P : ring phone (SIP, etc.)

V -> IVR : HTTP status "ringing"
activate IVR
V <<-- IVR : next status URL
deactivate IVR

V <<- P : answer phone
activate P

V -> IVR : HTTP status "in-progress"
activate IVR
V <<-- IVR : next status URL
deactivate IVR

V -> P : play Motech music
V <<-- P : enter pin
V -> PinAuthenticationController : HTTP authenticate
activate PinAuthenticationController
V <<-- PinAuthenticationController : result=true
deactivate PinAuthenticationController

V -> P : play "yellow skin?"
V <<-- P : answer "yes"
V -> VerboiceInteractionController : HTTP answer
activate VerboiceInteractionController
VerboiceInteractionController ->> Events : YES_YELLOW_SKIN_OR_EYES
deactivate VerboiceInteractionController
note right of Events : to encounter\nrecording

V -> P : play "abdominal pain?"
V <<-- P : answer "yes"
V -> VerboiceInteractionController : HTTP answer
activate VerboiceInteractionController
VerboiceInteractionController ->> Events : YES_ABDOMINAL_PAIN_OR_VOMITING
deactivate VerboiceInteractionController

V -> P : play "skin rash?"
V <<-- P : answer "no"
V -> VerboiceInteractionController : HTTP answer
activate VerboiceInteractionController
VerboiceInteractionController ->> Events : NO_SKIN_RASH_OR_ITCHY_SKIN
deactivate VerboiceInteractionController

V -> P : play "tingling?"
V <<-- P : answer "no"
V -> VerboiceInteractionController : HTTP answer
activate VerboiceInteractionController
VerboiceInteractionController ->> Events : NO_TINGLING_OR_NUMBNESS_OF_HANDS_OR_FEET
deactivate VerboiceInteractionController

V -> P : play "goodbye"
P -> P : hang up
deactivate P

V -> V : hang up

V -> IVR : HTTP status "completed"
activate IVR
V <<-- IVR : next status URL
deactivate IVR
V -> IVR : HTTP status "Disconnect"
activate IVR
V <<-- IVR : next status URL
deactivate V

IVR ->> Events : END_OF_CALL_EVENT
deactivate IVR
note right of Events : to call\ninitiation

@enduml
